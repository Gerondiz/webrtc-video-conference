// src/lib/tunnel-url.ts

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (SFU) –∏–ª–∏ WebSocket.
 * –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Ñ–ª–∞–≥ USE_DYNAMIC_TUNNEL_URL –∏ URL –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ.
 * –ò–Ω–∞—á–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 */
export const getSignalingUrl = async (defaultUrl: string): Promise<string> => {
  console.log('üîç getSignalingUrl called with defaultUrl:', defaultUrl); // ‚úÖ –õ–æ–≥
  if (process.env.NEXT_PUBLIC_USE_DYNAMIC_TUNNEL_URL === 'true') { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ NEXT_PUBLIC_
    console.log('üîÑ USE_DYNAMIC_TUNNEL_URL is true, fetching from API...'); // ‚úÖ –õ–æ–≥
    try {
      const response = await fetch('/api/tunnel-url'); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ API –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ
      console.log('üì• Fetched response from /api/tunnel-url, status:', response.status); // ‚úÖ –õ–æ–≥
      if (response.ok) {
        const data = await response.json();
        console.log('üì• Fetched tunnel URL from API:', data.url); // ‚úÖ –õ–æ–≥
        return data.url;
      } else {
        console.warn('‚ö†Ô∏è Failed to fetch tunnel URL from API (not ok status), falling back to env. Status:', response.status); // ‚úÖ –õ–æ–≥
      }
    } catch (error) {
      console.error('‚ùå Error fetching tunnel URL from API:', error); // ‚úÖ –õ–æ–≥
    }
  } else {
     console.log('üîÑ USE_DYNAMIC_TUNNEL_URL is not true, using env default'); // ‚úÖ –õ–æ–≥
  }
  console.log('üîÑ Falling back to default URL:', defaultUrl); // ‚úÖ –õ–æ–≥
  return defaultUrl;
};

/**
 * –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è WebSocket URL.
 */
export const getWebSocketUrl = async (defaultWsUrl: string): Promise<string> => {
  console.log('üîç getWebSocketUrl called with defaultWsUrl:', defaultWsUrl); // ‚úÖ –õ–æ–≥
  if (process.env.NEXT_PUBLIC_USE_DYNAMIC_TUNNEL_URL === 'true') { // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ NEXT_PUBLIC_
    console.log('üîÑ USE_DYNAMIC_TUNNEL_URL is true, fetching tunnel URL for WebSocket...'); // ‚úÖ –õ–æ–≥
    try {
      const response = await fetch('/api/tunnel-url');
      console.log('üì• Fetched response from /api/tunnel-url for WS, status:', response.status); // ‚úÖ –õ–æ–≥
      if (response.ok) {
        const data = await response.json();
        // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ wss, –µ—Å–ª–∏ URL –ø–æ–ª—É—á–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        const wssUrl = data.url.replace(/^https?:\/\//, 'wss://');
        console.log('üì• Fetched WebSocket URL from API:', wssUrl); // ‚úÖ –õ–æ–≥
        return wssUrl;
      } else {
        console.warn('‚ö†Ô∏è Failed to fetch tunnel URL from API for WebSocket (not ok status), falling back to env. Status:', response.status); // ‚úÖ –õ–æ–≥
      }
    } catch (error) {
      console.error('‚ùå Error fetching tunnel URL from API for WebSocket:', error); // ‚úÖ –õ–æ–≥
    }
  } else {
     console.log('üîÑ USE_DYNAMIC_TUNNEL_URL is not true for WS, using env default'); // ‚úÖ –õ–æ–≥
  }
  console.log('üîÑ Falling back to default WebSocket URL:', defaultWsUrl); // ‚úÖ –õ–æ–≥
  return defaultWsUrl;
};