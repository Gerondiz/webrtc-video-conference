// app/room/[id]/page.tsx
"use client";
import { useState, useCallback, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useMediaStream } from "@/contexts/MediaStreamContext";
import { useRoomConnection } from "@/hooks/useRoomConnection";
import { useMediasoup } from "@/hooks/useMediasoup";
import { useRoomStore } from "@/stores/useRoomStore";
import { useWebSocket } from "@/hooks/useWebSocket";
import { useChatPanel } from "@/hooks/useChatPanel";
import { getWebSocketUrl } from "@/lib/tunnel-url"; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä
import RoomHeader from "@/components/RoomPage/RoomHeader";
import MobileRoomHeader from "@/components/RoomPage/MobileRoomHeader";
import AdaptiveVideoGrid from '@/components/RoomPage/AdaptiveVideoGrid';
import ChatPanel from "@/components/RoomPage/ChatPanel";

export default function RoomPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const usernameFromParams = searchParams.get('username') || '';
  const { stream: localStream } = useMediaStream();
  const { isChatOpen, hasNewMessages, toggleChat } = useChatPanel();

  // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è URL WebSocket
  const [wsUrl, setWsUrl] = useState<string | null>(null);

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º WebSocket URL –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  useEffect(() => {
    const fetchWsUrl = async () => {
      const url = await getWebSocketUrl(process.env.NEXT_PUBLIC_WS_URL || 'wss://backend-mediasoup.onrender.com/wss');
      setWsUrl(url);
    };
    fetchWsUrl();
  }, []);

  // ‚úÖ –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ —Ö—É–∫–∏ **–¥–æ** –ª—é–±–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
  // –ï—Å–ª–∏ wsUrl === null, useWebSocket –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è)
  // –∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ö—É–∫ —É—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫.
  // –í–ê–ñ–ù–û: useWebSocket –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ –ø—É—Å—Ç–æ–º URL.
  const webSocket = useWebSocket(wsUrl || ''); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ wsUrl –µ—â—ë –Ω–µ—Ç
  const { isConnected } = webSocket;

  // ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—É–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
  const { roomId, sendChatMessage, leaveRoom } = useRoomConnection({
    webSocket,
  });

  const { currentUserId } = useRoomStore();

  // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º username –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL –≤ store (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
  useEffect(() => {
    if (usernameFromParams && !currentUserId) {
      // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å action –≤ store –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ username –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
      // useRoomStore.getState().setUsernameAndGenerateId(usernameFromParams);
      // –ò–ª–∏ –≤—ã–∑–æ–≤–∏ action, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    }
  }, [usernameFromParams, currentUserId]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
  const [remoteStreams, setRemoteStreams] = useState<
    Array<{
      userId: string;
      username: string;
      stream: MediaStream;
    }>
  >([]);

  useEffect(() => {
    console.log(
      "üì° Remote streams updated:",
      remoteStreams.map((r) => r.userId)
    );
  }, [remoteStreams]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SFU
  const { initializeMediasoup, cleanup } = useMediasoup({
    roomId,
    userId: currentUserId || "unknown",
    onRemoteStreamAdded: (stream, userId, username) => {
      setRemoteStreams((prev) => [...prev, { userId, username, stream }]);
    },
    onRemoteStreamRemoved: (userId) => {
      setRemoteStreams((prev) => prev.filter((s) => s.userId !== userId));
    },
    webSocket,
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º SFU –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞
  useEffect(() => {
    if (
      isConnected &&
      localStream &&
      currentUserId &&
      currentUserId !== "unknown"
    ) {
      console.log("üîå Initializing Mediasoup...");
      initializeMediasoup();
    } else {
      console.log(
        "‚ö†Ô∏è Cannot initialize Mediasoup: isConnected:",
        isConnected,
        "localStream:",
        !!localStream,
        "currentUserId:",
        currentUserId
      );
    }
  }, [isConnected, localStream, currentUserId, initializeMediasoup]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  useEffect(() => {
    return () => {
      cleanup();
    };
  }, [cleanup]);

  const toggleMic = useCallback(() => {
    if (localStream) {
      const audioTracks = localStream.getAudioTracks();
      audioTracks.forEach((track) => {
        track.enabled = !track.enabled;
      });
    }
  }, [localStream]);

  const toggleVideo = useCallback(() => {
    if (localStream) {
      const videoTracks = localStream.getVideoTracks();
      videoTracks.forEach((track) => {
        track.enabled = !track.enabled;
      });
    }
  }, [localStream]);

  const handleLeaveRoom = useCallback(() => {
    leaveRoom();
    router.push("/");
  }, [leaveRoom, router]);

  // ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º –ª–æ–∞–¥–µ—Ä, –µ—Å–ª–∏ wsUrl –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  if (!wsUrl) {
    return <div>Loading...</div>; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä, –ø–æ–∫–∞ URL –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
  }

  return (
    <div className="flex flex-col h-screen bg-gray-900">
      {/* –î–µ—Å–∫—Ç–æ–ø–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="hidden md:block">
        <RoomHeader
          roomId={roomId}
          onToggleMic={toggleMic}
          onToggleVideo={toggleVideo}
          onLeaveRoom={handleLeaveRoom}
          onToggleChat={toggleChat}
          isChatOpen={isChatOpen}
          hasNewMessages={hasNewMessages}
        />
      </div>

      {/* –ú–æ–±–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="md:hidden">
        <MobileRoomHeader
          roomId={roomId}
          onToggleMic={toggleMic}
          onToggleVideo={toggleVideo}
          onLeaveRoom={handleLeaveRoom}
          onToggleChat={toggleChat}
          isChatOpen={isChatOpen}
          hasNewMessages={hasNewMessages}
        />
      </div>

      <div className="flex flex-1 overflow-scroll">
        <AdaptiveVideoGrid remoteStreams={remoteStreams} />
        {isChatOpen && (
          <ChatPanel roomId={roomId} sendMessage={sendChatMessage} />
        )}
      </div>
    </div>
  );
}